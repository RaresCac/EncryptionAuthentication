#ifndef ENCRYPTOR_H
#define ENCRYPTOR_H

#include <QObject>

class Encryptor : public QObject
{
    Q_OBJECT
public:
    explicit Encryptor(QObject *parent = nullptr);

signals:
    void errorMessage(QString);

public slots:
    bool generateFileQML(QString username, QString password);

private:
    bool _generateFile(QString username, QString password);
    bool _generateRandomBytes(uchar* array, size_t size);
    int _derivePassword(char* password, uchar* salt, size_t size, uchar* output);
    int _encryptAES_256_CBC(uchar* input, size_t inSize, uchar* key, uchar* iv, uchar* output);
    int _decryptAES_256_CBC(uchar* input, size_t inSize, uchar* key, uchar* iv, uchar* output);
    void _splitArrayHalf(uchar* input, size_t inSize, uchar* half1, uchar* half2);
    int _sha256(uchar* input, size_t inSize, uchar* output, uint* outSize);
    void _handleErrorMessage(int errorCode);

    //Sizes of the randomly generated bytes
    size_t _derivedKeySize = 64;
    size_t _ivSize = 16;        //Size of an AES-256-CBC block
    size_t _encKeySize = 32;

    int _passIterations = 100000;
};

#endif // ENCRYPTOR_H
